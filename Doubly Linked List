#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int data;
    struct Node *rlink,*llink;
} node;

node *head = NULL;

void In_Front(int x){
    node *new = (node *)malloc(sizeof(node));
    new->data = x;
    new->rlink = NULL;
    new->llink = NULL;
    if(head == NULL){
        head = new;
    } else {
        new->rlink = head;
        head->llink = new;
        head = new;
    }
    printf("Element added.\n");
}

void In_End(int x){
 node *new = (node *)malloc(sizeof(node));
    new->data = x;
    new->rlink = NULL;
    new->llink = NULL;
     if (head == NULL){
         head = new;
     } else {
         node *ptr = head;
         while(ptr->rlink != NULL){
             ptr = ptr->rlink;
         }
         ptr->rlink = new;
         new->llink=ptr;
     }
     printf("Element added.\n");
 }

void In_spec(int key, int x){
    if(head == NULL){
        printf("List is Empty, Insertion not possible!\n");
    } else {
        node *ptr = head;
        while(ptr->data != key && ptr->rlink != NULL){
            ptr = ptr->rlink;
        }
        if(ptr->data != key){
            printf("Key not found!\n");
        } else if(ptr->rlink!=NULL && ptr->data==key){
            node *new = (node *)malloc(sizeof(node));
            new->data = x;
         new->llink = ptr;
         new->rlink = ptr->rlink;
            new->rlink->llink = new;
            ptr->rlink = new;
            printf("Element added.\n");
        }
        else{
         node *new = (node *)malloc(sizeof(node));
            new->data = x;
        new->llink = ptr;
        new->rlink=NULL;              
        ptr->rlink = new;
                printf("Element added.\n");
        }
    }
}

void Del_Front(){
    if (head == NULL){
        printf("List is Empty, Deletion not possible.\n");
    } else if(head->rlink==NULL) {
        node *temp = head;
        head = NULL;
        free(temp);
        printf("Element Deleted.\n");
    }
    else{
     node *temp=head;
     head=head->rlink;
     head->llink=NULL;
     free(temp);
     printf("Element Deleted.\n");
    }
}

void Del_spec(int key){
    if (head == NULL){
        printf("List is Empty, Deletion not possible.\n");
    } else if(head->rlink == NULL){
     if(head->data==key){
         node *temp = head;
         head = NULL;
         free(temp);
         printf("Element Deleted.\n");
    } else{
     printf("Search not found, deletion not possible!");}}
    else {
        node *ptr = head;
        while (ptr->data != key && ptr->rlink != NULL){
            ptr = ptr->rlink;
        }
        if (ptr->data == key && ptr->rlink!=NULL){
            ptr->llink->rlink=ptr->rlink;
            ptr->rlink->llink=ptr->llink;
            //ptr->llink=NULL;
            //ptr->rlink=NULL;
            free(ptr);
            printf("Element Deleted.\n");

        }
        else if(ptr->data == key && ptr->rlink==NULL){
         ptr->llink->rlink=NULL;
         free(ptr);
         printf("Element Deleted.\n");}
         else {
            printf("Key not found, Deletion not possible.\n");
        }
    }
}

void Del_End(){
    if (head == NULL){
        printf("List is Empty, Deletion not possible.\n");
    } else if(head->rlink == NULL){
        node *temp = head;
        head = NULL;
        free(temp);
        printf("Element Deleted.\n");
    } else {
        node *ptr = head;
        while (ptr->rlink != NULL){
            ptr = ptr->rlink;
        }
        ptr->llink->rlink = NULL;
       ptr->llink=NULL;
       ptr->rlink=NULL;
        printf("Element Deleted.\n");
    }
}

void Display(){
    if (head == NULL){
        printf("List is Empty\n");
    } else {
        node *ptr = head;
        printf("List: ");
        while(ptr->rlink != NULL){
            printf("%d ", ptr->data);
            ptr = ptr->rlink;
        }            printf("%d ", ptr->data);
        printf("\n");
    }
}
void main(){
    int c, item, x, key, n;
    printf("1. INSERTION AT FRONT\n");
    printf("2. INSERTION AT END\n");
    printf("3. DELETION AT FRONT\n");
    printf("4. DELETION AT END\n");
    printf("5. INSERTION AFTER A SPECIFIC NODE\n");
    printf("6. DELETION OF SPECIFIC NODE\n");
    printf("7. DISPLAY\n");
    do{
        printf("Enter your choice: ");
        scanf("%d", &c);
        switch(c){
            case 1:
                printf("Enter data: ");
                scanf("%d", &x);
                In_Front(x);
                break;
            case 2:
                printf("Enter data: ");
                scanf("%d", &x);
                In_End(x);
                break;
            case 3:
                Del_Front();
                break;
            case 4:
                Del_End();
                break;
            case 5:printf("Enter key: ");
                scanf("%d", &key);
                printf("Enter data: ");
                scanf("%d", &x);
                In_spec(key, x);
                break;
            case 6:
                printf("Enter key: ");
                scanf("%d", &key);
                Del_spec(key);
                break;
            case 7:
                Display();
                break;
            default:
                printf("Invalid choice!\n");
                break;
        }
        printf("Enter 0 to continue! ");
        scanf("%d", &n);
        if(n != 0)
            break;
    } while(1);
}
