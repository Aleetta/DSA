LINKED LIST
#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int data;
    struct Node *next;
} node;

node *head = NULL;

void In_Front(int x){
    node *new = (node *)malloc(sizeof(node));
    new->data = x;
    new->next = NULL;
    if(head == NULL){
        head = new;
    } else {
        new->next = head;
        head = new;
    }
    printf("Element added.\n");
}

void In_End(int x){
    node *new = (node *)malloc(sizeof(node));
    new->data = x;
    new->next = NULL;
    if (head == NULL){
        head = new;
    } else {
        node *ptr = head;
        while(ptr->next != NULL){
            ptr = ptr->next;
        }
        ptr->next = new;
    }
    printf("Element added.\n");
}

void In_spec(int key, int x){
    if(head == NULL){
        printf("List is Empty, Insertion not possible!\n");
    } else {
        node *ptr = head;
        while(ptr->data != key && ptr->next != NULL){
            ptr = ptr->next;
        }
        if(ptr->data != key){
            printf("Key not found!\n");
        } else {
            node *new = (node *)malloc(sizeof(node));
            new->data = x;
            new->next = ptr->next;
            ptr->next = new;
            printf("Element added.\n");
        }
    }
}

void Del_Front(){
    if (head == NULL){
        printf("List is Empty, Deletion not possible.\n");
    } else {
        node *temp = head;
        head = head->next;
        free(temp);
        printf("Element Deleted.\n");
    }
}

void Del_spec(int key){
    if (head == NULL){
        printf("List is Empty, Deletion not possible.\n");
    } else if(head->data == key){
        node *temp = head;
        head = head->next;
        free(temp);
        printf("Element Deleted.\n");
    } else {
        node *prev = head;
        node *cur = head->next;
        while (cur->data != key && cur->next != NULL){
            prev = cur;
            cur = cur->next;
        }
        if (cur->data != key){
            printf("Key not found, Deletion not possible.\n");
        } else {
            prev->next = cur->next;
            free(cur);
            printf("Element Deleted.\n");
        }
    }
}

void Del_End(){
    if (head == NULL){
        printf("List is Empty, Deletion not possible.\n");
    } else if(head->next == NULL){
        node *temp = head;
        head = NULL;
        free(temp);
        printf("Element Deleted.\n");
    } else {
        node *prev = head, *cur = head->next;
        while (cur->next != NULL){
            prev = cur;
            cur = cur->next;
        }
        prev->next = NULL;
        free(cur);
        printf("Element Deleted.\n");
    }
}

void Display(){
    if (head == NULL){
        printf("List is Empty\n");
    } else {
        node *ptr = head;
        printf("List: ");
        while(ptr != NULL){
            printf("%d ", ptr->data);
            ptr = ptr->next;
        }
        printf("\n");
    }
}
