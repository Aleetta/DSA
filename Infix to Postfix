#include<stdio.h>
#include <string.h>
#include <ctype.h>

int precedence(char x) { // Check precedence of operator
    switch (x) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

int main() {
    char A[100];
    printf("Enter Infix Expression: ");
    scanf("%s", A);
    int l = strlen(A);
    char P[l + 1];
    A[l] = '#';
    char S[l];
    int top = -1, p = 0, a = 0;

    while (A[a] != '#') {
        char c = A[a];
        if (isdigit(c) || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
            P[p++] = c; // If c is a digit or letter, add it to the postfix expression
        } else if (c == '(') {
            S[++top] = c; // Add left parenthesis to the stack
        } else if (c == ')') {
            while (top != -1 && S[top] != '(') {
                P[p++] = S[top--]; // Pop operators from stack to postfix until '('
            }
            top--; // Remove the '(' from the stack
        } else {
            // While stack is not empty, and precedence of current operator is less than or equal to top of stack
            while (top != -1 && S[top] != '(' && precedence(c) <= precedence(S[top])) {
                P[p++] = S[top--]; // Pop higher-precedence operators
            }
            S[++top] = c; // Push current operator onto the stack
        }
        a++;
    }

    // Pop all remaining operators from the stack
    while (top >= 0) {
        P[p++] = S[top--];
    }

    P[p] = '\0';
    printf("Postfix Expression: %s\n", P);
    return 0;
}
